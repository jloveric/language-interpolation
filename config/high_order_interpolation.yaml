data:
  type: sequence # centered
  reapply: 10 # number of times to reapply calculation
  max_size: -1
  num_workers: 10
  random_char_frac: 0.0

  # for convolutional input you need to set this to true
  add_channel_dimension: false

  # for transformers
  # trained context size is characters_per_feature*max_features
  characters_per_feature: 1
  max_features: 100

  # Number of times to repeat the dataset. I have a random width
  # sampler, that should be done deterministically, but it isn't
  # ideally this number would be max_features.
  repeats: 10

  train:
    filenames: null # ["books/the_raven.txt", "books/frankenstein.txt"]

    # Book ids from project gutenberg
    gutenberg_ids: [50133] #[10, 2800, 20, 22382, 50133]
    gutenberg_range: null #[1, 1000]

  test:
    filenames: null
    gutenberg_ids: [50133] # I actually want the test same as train
    gutenberg_range: null

  val:
    filenames: null
    gutenberg_ids: [1]
    gutenberg_range: null

  # Number of workers to use processing gutenberg books
  # each book is processed by a single process!
  pre_process_workers: 0

max_epochs: 100
accelerator: cuda
batch_size: 256
gradient_clip: null # 5.0

# Are you training? Otherwise plot the result
train: True
checkpoint: null
rotations: 1 # 1 is x,y, 2 is x,y, x-y, x+y, greater includes additional rotations

prompts:
  [
    "Where are you from?",
    "This is a strange planet",
    "Who are you?",
    "Golden goose",
    " ",
  ]

topk: 3
num_predict: 100
defaults:
  - optimizer: adam
  - net: small
  #- override hydra/sweeper: nevergrad
# hydra:
#   sweeper:
#     optim:
#       # name of the nevergrad optimizer to use
#       # OnePlusOne is good at low budget, but may converge early
#       optimizer: OnePlusOne
#       # total number of function evaluations to perform
#       budget: 100
#       # number of parallel workers for performing function evaluations
#       num_workers: 1
#       # maximize: true  # comment out for maximization
#     # default parametrization of the search space
#     parametrization:
#       #mlp.n:
#       #  init: 3
#       #  lower: 2
#       #  upper: 4
#       #  integer: true
#       mlp.layer_type:
#         #- continuous
#         - discontinuous
#       #lr :
#       #  init : 1e-4
#       #  lower : 1e-5
#       #  upper : 1e-3
#       #  step : 2
#       #  log : true
#       mlp.hidden.segments:
#         init: 8
#         lower: 8
#         upper: 100
#         integer: true
#       mlp.hidden.layers:
#         init: 1
#         lower: 1
#         upper: 3
#         integer: true
#       mlp.hidden.width:
#         init: 10
#         lower: 2
#         upper: 250
#         integer: true
#       mlp.output.segments:
#         init: 8
#         lower: 8
#         upper: 20
#         integer: true
